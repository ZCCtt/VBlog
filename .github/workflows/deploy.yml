name: Dev Build Release on README Update

on:
  push:
    paths:
      - 'README.md'  # 只在 README.md 文件变更时触发

jobs:
  create-dev-release:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. 设置 Node.js 环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. 安装依赖
    - name: Install dependencies
      run: npm install

    # 4. 执行开发构建 (使用 dev build 命令)
    - name: Run development build
      run: npm run dev build  # 注意这里是两个命令

    # 5. 生成版本号（基于日期时间 + dev 标识）
    - name: Generate Version
      id: version
      run: |
        TIMESTAMP=$(date +%Y.%m.%d-%H%M)
        echo "version=dev-$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "Generated dev version: dev-$TIMESTAMP"

    # 6. 准备开发版发布文件
    - name: Prepare dev release assets
      run: |
        # 创建时间戳
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # 打包开发构建产物（假设输出到 dist 或 build 目录）
        # 根据实际项目调整目录名
        tar -czf dev-build-$TIMESTAMP.tar.gz ./dist
        
        # 打包开发配置文件
        tar -czf dev-config-$TIMESTAMP.tar.gz .env .env.development
        
        # 打包纯净源码
        tar -czf source-code-$TIMESTAMP.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='.github' \
          .
        
        # 创建版本信息文件
        echo "Version: ${{ steps.version.outputs.version }}" > version.txt
        echo "Build Type: Development" >> version.txt
        echo "Build Command: npm run dev build" >> version.txt
        echo "Build Date: $(date)" >> version.txt
        echo "Commit: ${{ github.sha }}" >> version.txt
        echo "Triggered by: README.md update" >> version.txt

    # 7. 创建 GitHub Release (标记为预发布)
    - name: Create Dev Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}  # 使用生成的版本号
        release_name: "Dev Build ${{ steps.version.outputs.version }}"
        body: |
          **Development Build** triggered by README.md update
          
          ⚠️ This is a development build, not suitable for production use.
          
          **Build Details:**
          - Version: ${{ steps.version.outputs.version }}
          - Build Command: `npm run dev build`
          - Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - Build Date: $(date)
          - Trigger File: README.md
        draft: false
        prerelease: true  # 标记为预发布版本

    # 8. 上传 Release 资产
    - name: Upload Dev Build Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dev-build-*.tar.gz
        asset_name: dev-build-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Dev Config
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dev-config-*.tar.gz
        asset_name: dev-config-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Source Code
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./source-code-*.tar.gz
        asset_name: source-code-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Version Info
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./version.txt
        asset_name: build-info-${{ steps.version.outputs.version }}.txt